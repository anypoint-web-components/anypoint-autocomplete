/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   anypoint-autocomplete.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html} from 'lit-element';

export {AnypointAutocomplete};

/**
 * # `<paper-autocomplete>`
 */
declare class AnypointAutocomplete extends LitElement {

  /**
   * A target input field to observe.
   * It accepts an element which is the input with `value` property or
   * an id of an element that is a child of the parent element of this node.
   */
  target: HTMLElement|String|null;
  readonly suggestions: Array<String|null>|Array<object|null>|null;
  readonly loading: Boolean|null;

  /**
   * True when user query changed and waiting for `source` property update
   */
  _loading: boolean|null|undefined;

  /**
   * List of suggestions to display.
   * If the array items are strings they will be used for display a suggestions and
   * to insert a value.
   * If the list is an object the each object must contain `value` and `display`
   * properties.
   * The `display` property will be used in the suggestions list and the
   * `value` property will be used to insert the value to the referenced text field.
   */
  source: Array<object|null>|Array<String|null>|null;
  readonly opened: Boolean|null;
  _opened: boolean|null|undefined;
  legacy: boolean|null|undefined;

  /**
   * Enables compatibility with Anypoint components.
   */
  compatibility: boolean|null|undefined;
  isAttached: any;
  readonly _listbox: any;
  onquery: Function|null;
  onselected: Function|null;

  /**
   * List of suggestion that are rendered.
   */
  _suggestions: any[]|null|undefined;

  /**
   * Set this to true if you use async operation in response for query event.
   * This will display a loader when querying for more suggestions.
   * Do not use it it you do not handle suggestions asynchronously.
   */
  loader: boolean|null|undefined;

  /**
   * If true it will opend suggestions on input field focus.
   */
  openOnFocus: boolean|null|undefined;

  /**
   * The orientation against which to align the element vertically
   * relative to the text input.
   * Possible values are "top", "bottom", "middle", "auto".
   */
  verticalAlign: string|null|undefined;

  /**
   * A pixel value that will be added to the position calculated for the
   * given `verticalAlign`, in the direction of alignment. You can think
   * of it as increasing or decreasing the distance to the side of the
   * screen given by `verticalAlign`.
   *
   * If `verticalAlign` is "top" or "middle", this offset will increase or
   * decrease the distance to the top side of the screen: a negative offset
   * will move the dropdown upwards; a positive one, downwards.
   *
   * Conversely if `verticalAlign` is "bottom", this offset will increase
   * or decrease the distance to the bottom side of the screen: a negative
   * offset will move the dropdown downwards; a positive one, upwards.
   */
  verticalOffset: number|null|undefined;

  /**
   * The orientation against which to align the element horizontally
   * relative to the text input. Possible values are "left", "right",
   * "center", "auto".
   */
  horizontalAlign: string|null|undefined;

  /**
   * A pixel value that will be added to the position calculated for the
   * given `horizontalAlign`, in the direction of alignment. You can think
   * of it as increasing or decreasing the distance to the side of the
   * screen given by `horizontalAlign`.
   *
   * If `horizontalAlign` is "left" or "center", this offset will increase or
   * decrease the distance to the left side of the screen: a negative offset
   * will move the dropdown to the left; a positive one, to the right.
   *
   * Conversely if `horizontalAlign` is "right", this offset will increase
   * or decrease the distance to the right side of the screen: a negative
   * offset will move the dropdown to the right; a positive one, to the left.
   */
  horizontalOffset: number|null|undefined;

  /**
   * Determines which action to perform when scroll outside an opened overlay
   * happens. Possible values: lock - blocks scrolling from happening, refit -
   * computes the new position on the overlay cancel - causes the overlay to
   * close
   */
  scrollAction: string|null|undefined;

  /**
   * Removes animation from the dropdown.
   */
  noAnimations: boolean|null|undefined;

  /**
   * Removes ripple effect from list items.
   * This effect is always disabled when `compatibility` is set.
   */
  noink: boolean|null|undefined;

  /**
   * When set it won't setup `aria-controls` on target element.
   */
  noTargetControls: boolean|null|undefined;
  constructor();
  connectedCallback(): void;
  disconnectedCallback(): void;
  firstUpdated(): void;
  createRenderRoot(): any;
  render(): any;

  /**
   * Registers an event handler for given type
   *
   * @param eventType Event type (name)
   * @param value The handler to register
   */
  _registerCallback(eventType: String|null, value: Function|null): void;

  /**
   * Handler for target property change.
   */
  _targetChanged(): void;

  /**
   * Sets target input width on the listbox before rendering.
   */
  _setComboboxWidth(): void;

  /**
   * Generates an id on passed element.
   *
   * @param target An element to set id on to
   */
  _ensureNodeId(target: HTMLElement|null): void;

  /**
   * Setups relavent aria attributes in the target input.
   *
   * @param target An element to set attribute on to
   */
  _setupTargetAria(target: HTMLElement|null): void;

  /**
   * Sets `aria-expanded` on input's parent element.
   */
  _openedChanged(opened: Boolean|null): void;

  /**
   * Renders suggestions on target's `input` event
   */
  _targetInputHandler(e: Event|null): void;

  /**
   * Renders suggestions on target input focus if `openOnFocus` is set.
   */
  _targetFocusHandler(): void;

  /**
   * Renders suggestions for current input and opens the overlay if
   * there are suggestions to show.
   */
  renderSuggestions(): void;

  /**
   * Disaptches query event and returns it.
   *
   * @param value Current input value.
   */
  _disaptchQuery(value: String|null): CustomEvent|null;

  /**
   * Filter `source` array for current value.
   */
  _filterSuggestions(): void;
  _listSuggestions(source: any, query: any): any;
  _closeHandler(): void;
  notifyResize(): void;
  _selectionHandler(e: any): void;

  /**
   * Inserts selected suggestion into the text box and closes the suggestions.
   *
   * @param selected Index of suggestion to use.
   */
  _selectSuggestion(selected: Number|null): void;
  _refocusTarget(): void;

  /**
   * Handler for the keydown event.
   */
  _targetKeydown(e: KeyboardEvent|null): void;

  /**
   * If the dropdown is opened then it focuses on the first element on the list.
   * If closed it opens the suggestions and focuses on the first element on
   * the list.
   */
  _onDownKey(): void;

  /**
   * If the dropdown is opened then it focuses on the last element on the list.
   * If closed it opens the suggestions and focuses on the last element on
   * the list.
   */
  _onUpKey(): void;

  /**
   * Closes the dropdown.
   */
  _onEscKey(): void;

  /**
   * Accetps first suggestion from the dropdown when opened.
   */
  _onEnterKey(): void;

  /**
   * The element refocuses on the input when suggestions closes.
   * Also, the lisbox element is focusable so with tab it can be next target.
   * Finally, the dropdown has close animation that takes some time to finish
   * so it will try to refocus after the animation finish.
   * This function sets flags in debouncer to prohibit this.
   */
  _onTabDown(): void;

  /**
   * Dispatches `selected` event with new value.
   *
   * @param value Selected value.
   */
  _inform(value: String|object|null): void;
}

declare global {

  interface HTMLElementTagNameMap {
    "anypoint-autocomplete": AnypointAutocomplete;
  }
}
